// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        /** A Register */
        Not(in=instruction[15], out=isAInst);
        Mux16(a=aluout, b=instruction, sel=isAInst, out=amuxout);
        Or(a=isAInst, b=instruction[5], out=isAInstOrADest);
        ARegister(in=amuxout, load=isAInstOrADest, out=aout, out[0..14]=addressM);
        /** D Register */
        And(a=instruction[15], b=instruction[4], out=isCInstAndDDest);
        DRegister(in=aluout, load=isCInstAndDDest, out=dout);
        /** ALU */
        And(a=instruction[15], b=instruction[12], out=isCInstAndACtrl);
        Mux16(a=aout, b=inM, sel=isCInstAndACtrl, out=aoutMuxinM);
        ALU(
            x=dout,
            y=aoutMuxinM,
            zx=instruction[11],
            nx=instruction[10],
            zy=instruction[9],
            ny=instruction[8],
            f=instruction[7],
            no=instruction[6],
            out=aluout,
            out=outM,
            zr=aluZr,
            ng=aluNg
        );
        /** Write to memory decision */
        And(a=instruction[15], b=instruction[3], out=writeM);
        /** Jump Calculations */
        Not(in=aluZr, out=aluNotZr);               // Not Zero
        Not(in=aluNg, out=aluNotNg);               // Not Negative
        And(a=aluNotZr, b=aluNotNg, out=aluGt);    // Greater Than 0
        And(a=aluNotZr, b=aluNg, out=aluLt);       // Less Than 0
        And(a=instruction[0], b=aluGt, out=jgt);   // Jump[0] and greater than
        And(a=instruction[1], b=aluZr, out=jeq);   // Jump[1] and equal to
        And(a=instruction[2], b=aluLt, out=jlt);   // Jump[2] and less than
        Or(a=jgt, b=jeq, out=jge);                 // Jump if greater than or equal to
        Or(a=jge, b=jlt, out=jmp);                 // Jump if any condition
        And(a=instruction[15], b=jmp, out=pcload); // C Instruction and Jump
        /** Program Counter */
        PC(in=aout, load=pcload, inc=true, reset=reset, out[0..14]=pc);
}