// Bootstrap code
@256
D=A
@SP
M=D
@Sys.init
0;JMP
// Main.fibonacci: function Main.fibonacci 0
(Main.fibonacci)
// Main.fibonacci: push argument 0
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// Main.fibonacci: push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// Main.fibonacci: lt
@SP
AM=M-1
D=M
@SP
AM=M-1
D=M-D
@Main.fibonacci$lt.0
D;JLT
@SP
A=M
M=0
@SP
M=M+1
@Main.fibonacci$end_lt.0
0;JMP
(Main.fibonacci$lt.0)
@SP
A=M
M=-1
@SP
M=M+1
(Main.fibonacci$end_lt.0)
// Main.fibonacci: if-goto N_LT_2
@SP
AM=M-1
D=M
@Main.fibonacci$N_LT_2
D;JNE
// Main.fibonacci: goto N_GE_2
@Main.fibonacci$N_GE_2
0;JMP
// Main.fibonacci: label N_LT_2
(Main.fibonacci$N_LT_2)
// Main.fibonacci: push argument 0
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// Main.fibonacci: return
@LCL
D=M
@R13
M=D
@5
D=A
@R13
A=M-D
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// Main.fibonacci: label N_GE_2
(Main.fibonacci$N_GE_2)
// Main.fibonacci: push argument 0
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// Main.fibonacci: push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// Main.fibonacci: sub
@SP
AM=M-1
D=M
@SP
AM=M-1
D=M-D
@SP
A=M
M=D
@SP
M=M+1
// Main.fibonacci: call Main.fibonacci 1
@Main.fibonacci$ret.0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret.0)
// Main.fibonacci: push argument 0
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// Main.fibonacci: push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// Main.fibonacci: sub
@SP
AM=M-1
D=M
@SP
AM=M-1
D=M-D
@SP
A=M
M=D
@SP
M=M+1
// Main.fibonacci: call Main.fibonacci 1
@Main.fibonacci$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret.1)
// Main.fibonacci: add
@SP
AM=M-1
D=M
@SP
AM=M-1
D=D+M
@SP
A=M
M=D
@SP
M=M+1
// Main.fibonacci: return
@LCL
D=M
@R13
M=D
@5
D=A
@R13
A=M-D
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// Sys.init: function Sys.init 0
(Sys.init)
// Sys.init: push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// Sys.init: call Main.fibonacci 1
@Main.fibonacci$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret.2)
// Sys.init: label END
(Sys.init$END)
// Sys.init: goto END
@Sys.init$END
0;JMP